--- VTK/IO/Image/vtkJPEGReader.cxx	2013-02-07 16:43:54.000000000 +0100
+++ VTK/IO/Image/vtkJPEGReader.cxx	2014-01-11 15:02:08.000000000 +0100
@@ -47,6 +47,7 @@
   struct jpeg_error_mgr pub;    /* "public" fields */
   jmp_buf setjmp_buffer;        /* for return to caller */
   vtkJPEGReader* JPEGReader;
+  FILE *fp;
 };
 
 // this is called on jpeg error conditions
@@ -92,7 +93,11 @@
 }
 
 // Read JPEG image from a memory buffer
+#if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+extern "C" void jMemSrc (j_decompress_ptr cinfo, void* buffer, long nbytes)
+#else
 extern "C" void jpeg_mem_src (j_decompress_ptr cinfo, void* buffer, long nbytes)
+#endif
 {
   cinfo->src = (struct jpeg_source_mgr *)
       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
@@ -116,18 +121,21 @@
 
 void vtkJPEGReader::ExecuteInformation()
 {
+  // certain variables must be stored here for longjmp
+  struct vtk_jpeg_error_mgr jerr;
+  jerr.JPEGReader = this;
+  jerr.fp = NULL;
+
   this->ComputeInternalFileName(this->DataExtent[4]);
   if (this->InternalFileName == NULL && this->MemoryBuffer == NULL)
     {
     return;
     }
 
-  FILE *fp = NULL;
-
   if (!this->MemoryBuffer)
     {
-    fp = fopen(this->InternalFileName, "rb");
-    if (!fp)
+    jerr.fp = fopen(this->InternalFileName, "rb");
+    if (!jerr.fp)
       {
       vtkErrorWithObjectMacro(this,
                               "Unable to open file "
@@ -148,9 +156,6 @@
 
   // create jpeg decompression object and error handler
   struct jpeg_decompress_struct cinfo;
-  struct vtk_jpeg_error_mgr jerr;
-  jerr.JPEGReader = this;
-
   cinfo.err = jpeg_std_error(&jerr.pub);
   // for any jpeg error call vtk_jpeg_error_exit
   jerr.pub.error_exit = vtk_jpeg_error_exit;
@@ -161,9 +166,9 @@
     // clean up
     jpeg_destroy_decompress(&cinfo);
     // close the file
-    if (fp)
+    if (jerr.fp)
       {
-      fclose(fp);
+      fclose(jerr.fp);
       // this is not a valid jpeg file
       vtkErrorWithObjectMacro(this, "libjpeg could not read file: "
                               << this->InternalFileName);
@@ -178,13 +183,17 @@
   jpeg_create_decompress(&cinfo);
 
   // set the source file
-  if (fp)
+  if (jerr.fp)
     {
-    jpeg_stdio_src(&cinfo, fp);
+    jpeg_stdio_src(&cinfo, jerr.fp);
     }
   else
     {
+#if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+    jMemSrc(&cinfo, this->MemoryBuffer, this->MemoryBufferLength);
+#else
     jpeg_mem_src(&cinfo, this->MemoryBuffer, this->MemoryBufferLength);
+#endif
     }
 
   // read the header
@@ -209,9 +218,9 @@
   // close the file
   jpeg_destroy_decompress(&cinfo);
 
-  if (fp)
+  if (jerr.fp)
     {
-    fclose(fp);
+    fclose(jerr.fp);
     }
 }
 
@@ -219,14 +228,15 @@
 int vtkJPEGReaderUpdate2(vtkJPEGReader *self, OT *outPtr,
                           int *outExt, vtkIdType *outInc, long)
 {
-  unsigned int ui;
-  int i;
-  FILE *fp = 0;
+  // certain variables must be stored here for longjmp
+  struct vtk_jpeg_error_mgr jerr;
+  jerr.JPEGReader = self;
+  jerr.fp = NULL;
 
   if (!self->GetMemoryBuffer())
     {
-    fp = fopen(self->GetInternalFileName(), "rb");
-    if (!fp)
+    jerr.fp = fopen(self->GetInternalFileName(), "rb");
+    if (!jerr.fp)
       {
       return 1;
       }
@@ -234,9 +244,6 @@
 
   // create jpeg decompression object and error handler
   struct jpeg_decompress_struct cinfo;
-  struct vtk_jpeg_error_mgr jerr;
-  jerr.JPEGReader = self;
-
   cinfo.err = jpeg_std_error(&jerr.pub);
   // for any jpeg error call vtk_jpeg_error_exit
   jerr.pub.error_exit = vtk_jpeg_error_exit;
@@ -247,9 +254,9 @@
     // clean up
     jpeg_destroy_decompress(&cinfo);
     // close the file
-    if (fp)
+    if (jerr.fp)
       {
-      fclose(fp);
+      fclose(jerr.fp);
       }
 
     // this is not a valid jpeg file
@@ -258,13 +265,17 @@
   jpeg_create_decompress(&cinfo);
 
   // set the source file
-  if (fp)
+  if (jerr.fp)
     {
-    jpeg_stdio_src(&cinfo, fp);
+    jpeg_stdio_src(&cinfo, jerr.fp);
     }
   else
     {
+#if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+    jMemSrc(&cinfo, self->GetMemoryBuffer(), self->GetMemoryBufferLength());
+#else
     jpeg_mem_src(&cinfo, self->GetMemoryBuffer(), self->GetMemoryBufferLength());
+#endif
     }
 
   // read the header
@@ -277,7 +288,7 @@
   int rowbytes = cinfo.output_components * cinfo.output_width;
   unsigned char *tempImage = new unsigned char [rowbytes*cinfo.output_height];
   JSAMPROW *row_pointers = new JSAMPROW [cinfo.output_height];
-  for (ui = 0; ui < cinfo.output_height; ++ui)
+  for (unsigned int ui = 0; ui < cinfo.output_height; ++ui)
     {
     row_pointers[ui] = tempImage + rowbytes*ui;
     }
@@ -298,10 +309,9 @@
   jpeg_destroy_decompress(&cinfo);
 
   // copy the data into the outPtr
-  OT *outPtr2;
-  outPtr2 = outPtr;
+  OT *outPtr2 = outPtr;
   long outSize = cinfo.output_components*(outExt[1] - outExt[0] + 1);
-  for (i = outExt[2]; i <= outExt[3]; ++i)
+  for (int i = outExt[2]; i <= outExt[3]; ++i)
     {
     memcpy(outPtr2,
            row_pointers[cinfo.output_height - i - 1]
@@ -313,9 +323,9 @@
   delete [] row_pointers;
 
   // close the file
-  if (fp)
+  if (jerr.fp)
     {
-    fclose(fp);
+    fclose(jerr.fp);
     }
   return 0;
 }
@@ -389,18 +399,23 @@
 
 int vtkJPEGReader::CanReadFile(const char* fname)
 {
+  // certain variables must be stored here for longjmp
+  struct vtk_jpeg_error_mgr jerr;
+  jerr.JPEGReader = this;
+  jerr.fp = NULL;
+
   // open the file
-  FILE *fp = fopen(fname, "rb");
-  if (!fp)
+  jerr.fp = fopen(fname, "rb");
+  if (!jerr.fp)
     {
     return 0;
     }
   // read the first two bytes
   char magic[2];
-  int n = static_cast<int>(fread(magic, sizeof(magic), 1, fp));
+  int n = static_cast<int>(fread(magic, sizeof(magic), 1, jerr.fp));
   if (n != 1)
     {
-    fclose(fp);
+    fclose(jerr.fp);
     return 0;
     }
   // check for the magic stuff:
@@ -408,14 +423,12 @@
   if( ( (static_cast<unsigned char>(magic[0]) != 0xFF) ||
         (static_cast<unsigned char>(magic[1]) != 0xD8) ) )
     {
-    fclose(fp);
+    fclose(jerr.fp);
     return 0;
     }
   // go back to the start of the file
-  fseek(fp, 0, SEEK_SET);
+  fseek(jerr.fp, 0, SEEK_SET);
   // magic number is ok, try and read the header
-  struct vtk_jpeg_error_mgr jerr;
-  jerr.JPEGReader = this;
   struct jpeg_decompress_struct cinfo;
   cinfo.err = jpeg_std_error(&jerr.pub);
   // for any jpeg error call vtk_jpeg_error_exit
@@ -429,20 +442,20 @@
     // clean up
     jpeg_destroy_decompress(&cinfo);
     // close the file
-    fclose(fp);
+    fclose(jerr.fp);
     // this is not a valid jpeg file
     return 0;
     }
   /* Now we can initialize the JPEG decompression object. */
   jpeg_create_decompress(&cinfo);
   /* Step 2: specify data source (eg, a file) */
-  jpeg_stdio_src(&cinfo, fp);
+  jpeg_stdio_src(&cinfo, jerr.fp);
   /* Step 3: read file parameters with jpeg_read_header() */
   jpeg_read_header(&cinfo, TRUE);
 
   // if no errors have occurred yet, then it must be jpeg
   jpeg_destroy_decompress(&cinfo);
-  fclose(fp);
+  fclose(jerr.fp);
   return 3;
 }
 #ifdef _MSC_VER
